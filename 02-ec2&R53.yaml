- name: Launch EC2 instance with a Community AMI
  connection: local
  hosts: local
  vars:
    security_groups_ID: sg-087f3838223040db0
    subnet_ID: subnet-08933a042f7aa0d82
    image_ID: ami-09c813fb71547fc4f
    instances_type: t3.micro
    zone_name: naveenrajoli.site
  tasks:
  - name: installing python libraries
    ansible.builtin.pip:
      name: "{{ item }}"
      executable: pip3.9
    loop:
    - PyMySQL
    - cryptography
    - boto
    - boto3
    - botocore

  - name: Launching ec2 instance
    amazon.aws.ec2_instance:
      name: "{{ item }}"
      security_group: "{{ security_groups_ID}}"
      instance_type: "{{ instances_type }}"
      subnet_id: "{{ subnet_ID }}"
      image_id: "{{ image_ID }}"
      region: us-east-1
    loop:
    - mysql
    - backend
    - frontend
    register: ec2_info

  # - name: print ec2 information
  #   ansible.builtin.debug:
  #     msg: "{{ ec2_info }}"

  - name: print private ip
    ansible.builtin.debug:
      msg: "{{ item.instances[0].private_ip_address }}"
    loop: "{{ ec2_info.results }}"

  - name: Create record for private IPs
    amazon.aws.route53:
      state: present
      zone: "{{ zone_name }}"
      record: "{{ item.item }}.{{ zone_name }}"
      type: A
      ttl: 1
      value: "{{ item.instances[0].private_ip_address }}"
      wait: true
      overwrite: true
    loop: "{{ ec2_info.results }}"

  - name: Create record for private IPs
    amazon.aws.route53:
      state: present
      zone: "{{ zone_name }}"
      record: "{{ item.item }}.{{ zone_name }}"
      type: A
      ttl: 1
      value: "{{ item.instances[0].public_ip_address }}"
      wait: true
      overwrite: true
    loop: "{{ ec2_info.results }}"
    when: "{{ item.item }} == frontend"